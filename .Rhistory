plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeat(fit))
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df(fit))
sigma <- sqrt(deviance(fit)/df1(fit))
sigma <- sqrt(deviance(fit)/df(fit, 1))
sigma <- sqrt(deviance(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sigma * sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
?geom_boxplot
library(ggplot2)
?geom_boxplot
?boxplot
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
ones <- rep(1, nrow(galton))
lm(child~ones+parent-1, galton)
lm(child~parent,galton)
lm(child~1, galton)
head(trees)
fit <- lm(Volume~Girth+Height+Constant-1, trees)
trees2 <- eliminate("Girth", trees)
head(trees)
head(trees2)
fit2 <- lm(Volume ~ Height+Constant - 1, trees2)
lapply(list(fit,fit2), coef)
lm(Fertility~., swiss)
all <- lm(Fertility~., swiss)
summary(a)
summary(all)
lm(Fertility~Agriculture, swiss)
summary(lm(Fertility~Agriculture, swiss))
cor(Examination, Education)
cor("Examination", "Education")
cor("Examination")
cor(Examination, Education, swiss)
cor(Examination, Education)
cor(Education, Examination)
cor()
cor(Education)
cor(swiss)
cor(swiss$Examination, swiss$Education)
cor(swiss$Education, swiss$Agriculture)
makelms(swiss)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility~ . + ec)
efit <- lm(Fertility~ . + ec, swiss)
all$coef - efit$coefficients
all$coef - efit$coef
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays, 15)
Ax
sA
summary(InsectSprays[,2])
sapply(InsectSprays)
sapply(InsectSprays, class)
fit <- lm(count~spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count~spray - 1)
nfit <- lm(count~spray - 1, swiss)
nfit <- lm(count~spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count~., spray2)
fit2 <- lm(count~spray, spray2)
fit2 <- lm(spray2)
fit2 <- lm(count~spray, spray2)
fit2
fit2 <- lm(count~spray2, InsectSprays)
fit2
summary(fit2)$coef
mean(sC)
fit$coef[2]-fit$coef[3]/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
?boxplot
?names
?boxplot
swirl()
main()
?info
info()
play()
nxt()
play()
nxt()
info()
skip()
main()
dim(hunger)
948
names(hunger)
play()
str(hunger)
nxt()
fit <- lm(hunger~Year, hunger)
fit <- lm(hunger~Year)
fit <- lm(hunger~year)
fit
fit <- lm(hunger$numeric~hunger$Year)
fit <- lm(hunger$Numeric~hunger$Year)
summary(fit)$coef
fit <- lm(hunger$Numeric~hunger$Year[hunger$Sex=="Female"])
fit <- lm(hunger$Numeric[hunger$Sex=="Female"]~hunger$Year)
fit <- lm(hunger$Numeric~hunger$Year)
fit <- lm(hunger$Numeric[hunger$Sex=="Female"]~hunger$Year[hunger$Sex=="Female"])
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"]~hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"]~hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(hunger$Numeric~ hunger$Year + hunger$Sex)
summary(lmBoth)
lmInter <- lm(hunger$Numeric~hunger$Year + hunger$Sex, + hunger$Sex*hunger$Year, hunger)
lmInter <- lm(hunger$Numeric~hunger$Year + hunger$Sex + hunger$Sex*hunger$Year, hunger)
summary(lmInter)
simbias()
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility~Agriculture)
fit1 <- lm(Fertility~Agriculture, swiss)
fit3 <- lm(Fertility, Agriculture + Examination + Education, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- deviance(fit1)- deviance(fit3)
n <- (deviance(fit1)- deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility~.,swiss)
vif(mdl)
mdl2 <- lm(Fertility~. - Examination,swiss)
vif(mdl2)
main()
main()
main()
play()
install.packages("GGally")
?ggpairs
library(GGally)
?ggpairs
ggpairs(mtcars)
data("mtcars")
fit <- lm(mpg~weight * factor(cyl))
fit <- lm(mpg~wt * factor(cyl))
names(mtcars)
fit <- lm(mpg~cyl * factor(wt))
data(mtcars)
fit <- lm(mpg~wt * factor(cyl), mtcars)
summary(fit)
mtcars
fit <- lm(mpg~factor(cyl) + wt, mtcars)
fit
fit <- lm(mpg~wt * factor(cyl), mtcars)
fit
fit <- lm(mpg~factor(cyl) + wt, mtcars)
fit
?ggpairs
?list
?ggpairs
?pairs
install.packages("bestglm")
swirl()
swirl()
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975, 2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn + c(-1,1) * .975 * (s/sqrt(10))
mn + c(-1,1) * qt(.975,10-1) * (s/sqrt(10))
mn + c(-1,1) * qt(.975,9) * (s/sqrt(10))
mn + c(-1,1)*qt(.975,10-1)*s/sqrt(10)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
sp <- (8-1)*(15.34)^2+(21-1)*(18.23-1)^2
sp <- (8-1)*(15.34)^2+(21-1)*(18.23)^2
ns <- (7+20)/2
ns <- 27
sp <- sqrt(sp/ns)
(132.86-127.44) + c(-1,1) * qt(.975, ns)*sp*sqrt((1/8)+(1/21))
(132.86-127.44) + c(-1,1) * qt(.975, ns)*sp*sqrt(1/8+1/21)
132.86-127.44 + c(-1,1) * qt(.975, ns)*sp*sqrt(1/8+1/21)
sp <- sqrt(var(g1, g2)/18)
sp <- sqrt(9*var(g1)+9*var(g2)/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1) *sp*sqrt(1/10+1/10)
md + c(-1,1)*qt(.975,18) *sp*sqrt(1/10+1/10)
t.test(g2-g1, paired=FALSE, var.equal = TRUE)
t.test(g2, g1, paired=FALSE, var.equal = TRUE)$conf
t.test(g2, g1, paired=TRUE)$conf
num <- (15.34^2/8 + 18.23^2/21)^2
den <- 15.34^4/8^2/(8-1) + 18.23^4/21^2/(21-1)
mydf <- num/den
132.86-127.44 + c(-1,1)*qt(.975,mydf)*(15.34^2/(8-1) + (18.23^2/(21-1))
132.86-127.44 + c(-1,1)*qt(.975,mydf)*(15.34^2/(8-1) + (18.23^2/(21-1))
132.86-127.44 + c(-1,1)*qt(.975,mydf)*(15.34^2/7 + 18.23^2/20)
132.86-127.44 + c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/7 + 18.23^2/20)
132.86-127.44 + c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
play()
install.packages("caret")
library(caret)
swirl()
10/sqrt(100)
2
(32-30)/(10/sqrt(16))
16-1
qt(.95, 15)
dim(fs)
t.test(fs$fheight, fs$sheight, paired = TRUE)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
.0039
.035
mybin[7]
mybin[8]
6
mybin[6]
skip()
swirl()
library(swirl)
swirl()
pt(2.5, 15, lower.tail = FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6,8, .5, lower.tail = FALSE)
pbinom(7,8, .5, lower.tail = TRUE)
ppois(9, 5, lower.tail = FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z, mean=30, lower.tail = FALSE)
pnorm(30+z, mean=32, lower.tail = FALSE)
pnorm(30+z, mean=32, sd=1, lower.tail = FALSE)
pnorm(30+z*2, mean=32, sd=1, lower.tail = FALSE)
pnorm(30+z*2, mean=32, sd=2, lower.tail = FALSE)
power.t.test(n=16, delta = 2/4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n=16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n=16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2/4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power=.8, n=26, sd=1)$delta
power.t.test(power=.8, n=26, sd=1, ttype = "one.sample", alt = "one.sided")$delta
power.t.test(power=.8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power=.8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
install.packages("GTK+")
library(RMySQL)
install.packages("sqldf")
source("hhtp://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
fileUrl <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "asc.csv", method = curl)
fileUrl <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "asc.csv", method = "curl")
acs <- data.table("acs.csv")
library(dyplr)
library(dplyr)
acs <- data.table("acs.csv")
acs <- data.table("acs.csv")
acs <- read.table("acs.csv")
library(sqldf)
sqldf("select pwgtp1 from acs")
sqldf("select * from acs where AGEP < 50")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs")
dbConnect(MySQL())
acs <- read.csv("acs.csv")
sqldf("select * from acs")
library(sqldf)
acs <- read.csv("acs.csv")
sqldf("select * from acs")
library(RMySQL)
library(sqldf)
acs <- read.csv("acs.csv")
sqldf("select * from acs")
mydb = dbConnect(MySQL(), user='user', password='password', dbname='database_name', host='host')
head(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
library(swirl)
swirl()
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo=11, bar=1, norf = NA)
vect <- c(foo=11, bar=2, norf = NA)
vect
names(vect)
vect2 <- c(11,2, NA)
names(vect2 <- c("foo", "bar", "norf"))
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect("bar")
vect["bar"]
vect[c("foo", "bar")]
View(top_counts)
top_counts_sorted <- arrange(desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
skip()
submit()
submit()
skip()
submit()
getwd()
skip()
submit()
skip()
fileUrl <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip")
fileUrl <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", destfile = "run_analysis_data.csv", method = "curl")
setwd("~/GitHub/Getting-and-Cleaning-Data")
fileUrl <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", destfile = "run_analysis_data.csv", method = "curl")
run_data <- read.csv("run_analysis_data.csv")
run_data <- read.table("run_analysis_data.csv")
fileUrl <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", destfile = "run_analysis_data", method = "curl")
run_data <- read.table("run_analysis_data")
run_data <- read.table("run_analysis_data", header=TRUE, sep = "")
run_data <- read.table(run_analysis_data)
fileUrl <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", destfile = "run_analysis_data.csv", method = "curl")
run_data <- read.csv(run_analysis_data.csv)
run_data <- read.csv("run_analysis_data.csv")
fileUrl <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", destfile = "run_analysis_data.for", method = "curl")
run_data <- read.csv("run_analysis_data.for")
fileUrl <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", destfile = "run_analysis_data.zip", method = "curl")
unzip("run_analysis_data.zip")
test <- read.table("/UCI HAR Dataset/test/X_test.txt")
library(dplyr)
test <- read.table("UCI HAR Dataset/test/X_test.txt")
head(tet)
head(test)
train <- read.table("UCI HAR Dataset/train/X_train.txt")
swirl()
5 + 7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z *2+100
sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z *2+1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exist("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
file.path(dir.create("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"))
file.path(dir.create("testdir2", "testdir3"), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive =TRUE)
unlink("testdir2", recursive = TRUE)
setwd("~/")
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- "My", "name", "is"
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Charles")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5 , NA)
3 * x
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_data)
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[-c(2,10)]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vvect)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
bye()
# Downloads the file, names it, and places it in working directory
setwd("~/GitHub/Getting-and-Cleaning-Data")
#Set working directory
library(dplyr)
# Library call for the dplyr package, which is used for data manipulation
if !file.exists("run_analysis_data.zip")
fileUrl <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", destfile = "run_analysis_data.zip", method = "curl")
# Downloads the file, names it, and places it in working directory
unzip("run_analysis_data.zip")
# Unzips the downloaded file
test <- read.table("UCI HAR Dataset/test/X_test.txt")
train <- read.table("UCI HAR Dataset/train/X_train.txt")
#places the data into the train and test variables
